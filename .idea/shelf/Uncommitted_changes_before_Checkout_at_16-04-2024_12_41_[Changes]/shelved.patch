Index: screens/DocereeAdView.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { View, Text, StyleSheet, Image, TouchableOpacity, useWindowDimensions, Linking, Animated } from 'react-native'\r\nimport { loadAd} from '../src/services/AdRequestApi.js'\r\nimport { impressionApi} from '../src/services/ImpressionApi.js'\r\nimport { WebView } from 'react-native-webview';\r\nimport { useIsInViewPortEffect } from 'react-native-viewport-helpers';\r\nimport RenderHtml from 'react-native-render-html';\r\nimport { useFocusEffect } from '@react-navigation/native';\r\nimport ConsentViewOne from './ConsentViewOne.js';\r\nimport Colors from '../src/utils/Colors.js'\r\n\r\nconst DocereeAdView = ({ adSize=\"\", adUnit=\"\" }) => {\r\n    var sizeStr = adSize + '';\r\n    var sizeArr = sizeStr.split('x');\r\n    const [script, setScript] = useState(null);\r\n    [viewabilityCounter, setViewabilityCounter] = useState(0);\r\n    htmlContent = `<!DOCTYPE html><html><head><meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"></head><body>${script}</body></html>`;\r\n\r\n    const baseObj = {\r\n        adRequested : false,\r\n        timer : null,\r\n        docereeId : adUnit,\r\n        adCount : 0,\r\n        inViewport : false\r\n    }\r\n    const [adStatus, setAdStatus] = useState(baseObj);\r\n    const [adResponse, setAdResponse] = useState(null);\r\n\r\n    const adInView = () => {\r\n        adStatus['inViewport'] = true;\r\n        if(adStatus['inViewport'] == true && adStatus['adRequested'] == false) {\r\n            fetchAd();\r\n        }\r\n    }\r\n\r\n\r\n    const adOutOfView = () => {\r\n        adStatus['inViewport'] = false;\r\n    }\r\n\r\n    async function fetchAd() {\r\n        try {\r\n            let adData = await loadAd('https://qa-ad-test.doceree.com/drs/quest', adUnit)\r\n            console.log('adData:', adData);\r\n            setAdResponse(adData.response[0])\r\n            setScript(adData.response[0].script)\r\n            console.log('htmlContent:', htmlContent);\r\n\r\n            htmlContent = htmlContent.replace(\"replaceable\", script)\r\n//            sanitizedHtml()\r\n//            startTimer()\r\n            adStatus['adRequested'] = true;\r\n            sendImpression()\r\n        } catch (error) {\r\n            console.log('error redering:', error);\r\n        }\r\n        if(adStatus['timer'] == null) {\r\n            setTimeout(() => {\r\n            console.log(\"inside timer\")\r\n            },30000)\r\n        }\r\n    }\r\n\r\n    sendImpression = () => {\r\n        if(adResponse) {\r\n            const currentTimeMillis = Date.now();\r\n            adRenderURL = adResponse.adRenderURL\r\n            adRenderURL = adRenderURL.replace('{{EVENT_CLIENT_TIME}}', currentTimeMillis)\r\n            impressionApi(adRenderURL)\r\n        }\r\n    }\r\n\r\n    sanitizedHtml = () => {\r\n        if (adResponse && adResponse.script) {\r\n            console.log('starting:', script);\r\n            const script = JSON.stringify(adResponse.script)\r\n            sanitizedScript = script//.split(\"\\n\").map(line => `${line}<br>`).join(\"\")\r\n            sanitizedScript = sanitizedScript.replace(/\\\\n/g, \"\")\r\n            sanitizedScript = sanitizedScript.replace(/<br>/, \"\")\r\n            sanitizedScript = sanitizedScript.replaceAll(/\\\\/g, \"\")\r\n            sanitizedScript = sanitizedScript.replace(/\\\\\"/g, \"\")\r\n            sanitizedScript = sanitizedScript.replace(/\"/g, \"\")\r\n            setScript(sanitizedScript)\r\n            console.log('sanitizedScript:', script);\r\n        }\r\n    };\r\n\r\n    useFocusEffect(\r\n        React.useCallback(() => {\r\n            return () => {\r\n                clearInterval(interval) // Reset the timer when leaving the screen\r\n                console.log('useFocusEffect');\r\n            };\r\n        }, [])\r\n    );\r\n\r\n    let interval = React.useRef(null);\r\n    const [timerCount, setTimer] = useState(1)\r\n\r\n    startTimer = () => {\r\n        interval = setInterval(() => {\r\n            setTimer(lastTimerCount => {\r\n                if (lastTimerCount == 30) {\r\n                    //your redirection to Quit screen\r\n                    setTimer(1)\r\n                    adStatus['adRequested'] = false;\r\n                    if(adStatus['inViewport'] == true) {\r\n                        console.log(adUnit)\r\n                        fetchAd();\r\n                    }\r\n                    adStatus['timer'] = null;\r\n                    clearInterval(interval)\r\n                    return 1\r\n                } else {\r\n                    console.log(\"timerCount with id:\",lastTimerCount, adUnit)\r\n                    if(adStatus['inViewport'] == true) {\r\n                        setViewabilityCounter((preValue) => preValue + 1);\r\n                        console.log(\"viewabilityCounter:\",viewabilityCounter)\r\n                    }\r\n                    return lastTimerCount + 1\r\n                }\r\n            })\r\n        }, 1000) //each count lasts for a second\r\n        //cleanup the interval on complete\r\n        return () => clearInterval(interval)\r\n    }\r\n\r\n    const ref = useRef(null);\r\n        useIsInViewPortEffect(\r\n            ref,\r\n            () => {\r\n                console.log('Viewport In', adUnit);\r\n                adInView();\r\n                return () => {\r\n                    console.log('Viewport out',adUnit);\r\n                    adOutOfView();\r\n                };\r\n            },\r\n        [],\r\n        20\r\n    );\r\n\r\n    const onClickedIcon = () => {\r\n        setConsentStatus(true)\r\n    }\r\n\r\n    RenderText = () => {\r\n        return(\r\n            <View  ref={ref}>\r\n                <Text>Hello, I am {adUnit}!</Text>\r\n            </View>\r\n        )\r\n    }\r\n\r\n    RenderWebView = ({adResponse,htmlContent}) => {\r\n        console.log(\"htmlContentllll:\", htmlContent);\r\n        return(\r\n                <WebView\r\n                originWhitelist={['*']}\r\n                source={{ html: htmlContent }}\r\n                style={styles.webview}\r\n                javaScriptEnabled={true}\r\n                domStorageEnabled={true}\r\n                scalesPageToFit={true}\r\n                />\r\n            )\r\n    }\r\n\r\n    const { width } = useWindowDimensions();\r\n    RenderDiv = ({adResponse,htmlContent}) => {\r\n        console.log(\"htmlContentllll:\", htmlContent);\r\n            return(\r\n                <RenderHtml\r\n                    contentWidth={width}\r\n                    source={{ html: htmlContent }}\r\n                />\r\n        )\r\n    }\r\n\r\n    RenderImage = ({adResponse}) => {\r\n        return (\r\n            <TouchableOpacity onPress={() => Linking.openURL(adResponse?.adViewedURL)} ref={ref}>\r\n                <Image\r\n                    source={{ uri: adResponse?.imagePath }}\r\n                    style={styles.container}\r\n                />\r\n                <Text>{adResponse?.data?.response[0]?.adText}</Text>\r\n            </TouchableOpacity>\r\n        );\r\n    }\r\n\r\n    RenderViewWithScript = ({adResponse,htmlContent}) => {\r\n        if(script.includes('iframe')) {\r\n            console.log(\"script.includes('iframe')\");\r\n            return (\r\n                <View style={styles.container}>\r\n                    <RenderWebView data={adResponse} htmlContent={htmlContent} />\r\n                </View>\r\n            )\r\n        } else {\r\n            return (\r\n                <View style={styles.container}>\r\n                    <RenderDiv data={adResponse} htmlContent={htmlContent} />\r\n               </View>\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n\r\n    RenderIcons = () => {\r\n        const animatedWidth = useRef(new Animated.Value(0)).current;\r\n        animatedBox = () => {\r\n            console.log(\"Clicked\")\r\n            Animated.timing(\r\n            animatedWidth, {\r\n                toValue: 90,\r\n                duration: 1000,\r\n                useNativeDriver: false\r\n            }).start(({ finished }) => {\r\n                if (finished) {\r\n                    onClickedIcon()\r\n                    console.log('Animation finished');\r\n                }\r\n            });\r\n        }\r\n        const animatedStyle = { width: animatedWidth, height: 15 }\r\n        return (\r\n            <View style={[styles.overlay]}>\r\n                <TouchableOpacity style = {styles.containerN} onPress = {animatedBox}>\r\n                    <Animated.View style = {[animatedStyle]}>\r\n                        <Text style = {styles.text}>Ads by doceree</Text>\r\n                    </Animated.View>\r\n                </TouchableOpacity>\r\n                <TouchableOpacity onPress={animatedBox} ref={ref}>\r\n                    <Image source={require('../src/assets/info.png')} style={{ height: 15, width: 15,\r\n                    tintColor: Colors.purpleColor}} />\r\n                </TouchableOpacity>\r\n                <TouchableOpacity onPress={() => onClickedIcon()} ref={ref}>\r\n                    <Image source={require('../src/assets/xmark.png')} style={{ height: 15, width: 15,\r\n                    tintColor: Colors.purpleColor}} />\r\n                </TouchableOpacity>\r\n            </View>\r\n        )\r\n    }\r\n\r\n    RenderConsentView = ({adResponse,htmlContent}) => {\r\n        <View style={styles.container} ref={ref}>\r\n            <ConsentViewOne adResponse={adResponse}/>\r\n        </View>\r\n    }\r\n\r\n    const [consentStatus, setConsentStatus] = useState(false);\r\n    // Callback function to update value in ParentComponent\r\n    const handleCallback = (showConsent, isRefresh) => {\r\n        setConsentStatus(showConsent);\r\n    };\r\n    const styles = styling(adResponse);\r\n    if (!adResponse) {\r\n        return (\r\n            <View style={styles.container}>\r\n                <RenderText />\r\n            </View>\r\n        )\r\n    } else {\r\n        return (\r\n            <View style={{ flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n                <View style={styles.container}>\r\n                    {adResponse?.imagePath ? <RenderImage data={adResponse}/> :\r\n                    script && <RenderViewWithScript data={adResponse} htmlContent={htmlContent} />}\r\n                    <RenderIcons/>\r\n                </View>\r\n\r\n                {consentStatus && (\r\n                    <View style={styles.container} ref={ref}>\r\n                        <ConsentViewOne onCallback={handleCallback} adResponse={adResponse}/>\r\n                    </View>\r\n                )}\r\n            </View>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default DocereeAdView\r\n\r\nexport const styling = (adResponse) =>\r\n    StyleSheet.create({\r\n    container: {\r\n        backgroundColor: Colors.grey1BackgroundColor,\r\n        position: 'absolute',\r\n        width: parseInt(typeof adResponse?.adSize !== 'undefined' ? adResponse.adSize.split('x')[0] : 320),\r\n        height: parseInt(typeof adResponse?.adSize !== 'undefined' ? adResponse.adSize.split('x')[1]: 50),\r\n    },\r\n    overlay: {\r\n          flex: 1,\r\n          position: 'absolute',\r\n          flexDirection: 'row',\r\n          gap: 5,\r\n          right: 0,\r\n          top: 2,\r\n          height: 15,\r\n    },\r\n    containerN: {\r\n        justifyContent: 'center',\r\n        alignItems: 'center'\r\n    },\r\n    text: {\r\n        textAlign: 'center', // <-- the magic\r\n        fontSize: 12,\r\n        color: Colors.purpleColor,\r\n    }\r\n});
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/screens/DocereeAdView.js b/screens/DocereeAdView.js
--- a/screens/DocereeAdView.js	(revision 20f861bf975b0ccee56883a22ae6b2f97c1fdf46)
+++ b/screens/DocereeAdView.js	(date 1712576090976)
@@ -15,7 +15,9 @@
     var sizeArr = sizeStr.split('x');
     const [script, setScript] = useState(null);
     [viewabilityCounter, setViewabilityCounter] = useState(0);
-    htmlContent = `<!DOCTYPE html><html><head><meta name="viewport" content="width=device-width,initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"></head><body>${script}</body></html>`;
+    htmlContent = `<!DOCTYPE html><html><head>
+    <meta name="viewport" content="width=device-width,initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
+    </head><body>${script}</body></html>`;
 
     const baseObj = {
         adRequested : false,
@@ -311,4 +313,4 @@
         fontSize: 12,
         color: Colors.purpleColor,
     }
-});
\ No newline at end of file
+});
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"NONE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"22fc3090-9bc9-4d3b-bd38-5de3499b2bd3\" name=\"Changes\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/package-lock.json\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/package-lock.json\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/yarn.lock\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/yarn.lock\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ClangdSettings\">\r\n    <option name=\"formatViaClangd\" value=\"false\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2dMST5sKOGDG7hnV0am6aHwjkTr\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;RunOnceActivity.OpenProjectViewOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.cidr.known.project.marker&quot;: &quot;true&quot;,\r\n    &quot;cf.first.check.clang-format&quot;: &quot;false&quot;,\r\n    &quot;cidr.known.project.marker&quot;: &quot;true&quot;,\r\n    &quot;com.google.services.firebase.aqiPopupShown&quot;: &quot;true&quot;,\r\n    &quot;dart.analysis.tool.window.visible&quot;: &quot;false&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;C:/Users/Abhishek Srivastava/Project/reactnative/RNSampleApp/android&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;configurable.group.appearance&quot;,\r\n    &quot;show.migrate.to.gradle.popup&quot;: &quot;false&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"$PROJECT_DIR$/src/assets\" />\r\n      <recent name=\"$PROJECT_DIR$/screens\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"22fc3090-9bc9-4d3b-bd38-5de3499b2bd3\" name=\"Changes\" comment=\"\" />\r\n      <created>1709816459399</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1709816459399</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 20f861bf975b0ccee56883a22ae6b2f97c1fdf46)
+++ b/.idea/workspace.xml	(date 1712581026420)
@@ -5,9 +5,9 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="22fc3090-9bc9-4d3b-bd38-5de3499b2bd3" name="Changes" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/package-lock.json" beforeDir="false" afterPath="$PROJECT_DIR$/package-lock.json" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/yarn.lock" beforeDir="false" afterPath="$PROJECT_DIR$/yarn.lock" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/screens/DocereeAdView.js" beforeDir="false" afterPath="$PROJECT_DIR$/screens/DocereeAdView.js" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -18,6 +18,11 @@
     <option name="formatViaClangd" value="false" />
   </component>
   <component name="Git.Settings">
+    <option name="RECENT_BRANCH_BY_REPOSITORY">
+      <map>
+        <entry key="$PROJECT_DIR$" value="main" />
+      </map>
+    </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
   <component name="MarkdownSettingsMigration">
